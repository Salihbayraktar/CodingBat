/*
We'll say that a "mirror" section in an array is a group of contiguous elements such that somewhere in the array, the same group appears in reverse order. For example, the largest mirror section in {1, 2, 3, 8, 9, 3, 2, 1} is length 3 (the {1, 2, 3} part). Return the size of the largest mirror section found in the given array.


maxMirror([1, 2, 3, 8, 9, 3, 2, 1]) → 3
maxMirror([1, 2, 1, 4]) → 3
maxMirror([7, 1, 2, 9, 7, 2, 1]) → 2
*/

public int maxMirror(int[] nums) {
  int mirror = 0;
  int maxMirror = 0;
  int value =0;
  for(int i = 0 ; i < nums.length ; i++) {
    value = i;
    for(int j = nums.length-1 ; j >= 0 ; j--) {
      
      if(nums[value] == nums[j]) {
        mirror++;
        if(value < nums.length-1){
          value++;
        }
        else if(mirror == nums.length) {
          return mirror;
        }
        else {
          break;
        }
        
      }
      else if(mirror != 0) {
        if(mirror > maxMirror) {
          maxMirror = mirror;
        }
        mirror = 0;
      }
    }
    
  }
  return maxMirror;
}





--------------------------------------------------------

// maxMirror([1, 1, 1]) → 3	0	X	
// maxMirror([1]) → 1		0	X	 These two tests do not work with the following code

public int maxMirror(int[] nums) {
  int mirror = 0;
  int maxMirror = 0;
  int value =0;
  for(int i = 0 ; i < nums.length ; i++) {
    value = i;
    for(int j = nums.length-1 ; j >= 0 ; j--) {
      
      if(nums[value] == nums[j]) {
        mirror++;
        if(value < nums.length-1){
          value++;
        }
        else {
          break;
        }
        
      }
      else if(mirror != 0) {
        if(mirror > maxMirror) {
          maxMirror = mirror;
        }
        mirror = 0;
      }
    }
    
  }
  return maxMirror;
}
